<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Rubin</title><link href="https://rubinposts.github.io/" rel="alternate"></link><link href="https://rubinposts.github.io/feeds/all.atom.xml" rel="self"></link><id>https://rubinposts.github.io/</id><updated>2017-05-11T13:00:00+09:00</updated><entry><title>Carthage</title><link href="https://rubinposts.github.io/carthage.html" rel="alternate"></link><published>2017-05-11T13:00:00+09:00</published><author><name>Rubin</name></author><id>tag:rubinposts.github.io,2017-05-11:carthage.html</id><summary type="html">&lt;p&gt;Swift에 Library를 설치하는 방법은 몇가지가 있지만 살짝 불편하더라도 심플하고 유연성있는 것을 추구하는 나에게 Carthage가 매력적으로 다가왔다.
Carthage의 장점은 Compile시간의 축소를 들 수 있고 단점은 라이브러리 추가시 설정이 필요하다는 부분과 이행파일을 볼 수 없다는 점이다.
또한 Carthage는 iOS8이상을 대상으로 하기 때문에 그 이하 버전을 고려하는 프로젝트에서는 제고해 봐야 한다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;설치 방법&lt;/h3&gt;
&lt;p&gt;Homebrew를 추천하므로 homebrew방식만 적는다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew update
brew install carthage
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
Project Root폹더에 Cartfile을 생성한다.
그리고 그 안에 자신이 원하는 프로젝트를 작성한다. 예를들어,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;github &lt;span class="s2"&gt;&amp;quot;Alamofire/Alamofire&amp;quot;&lt;/span&gt; ~&amp;gt; 4.4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
어떻게 작성해야 되는지는 해당 프로젝트에서 Carthage를 지원한다면 잘 나와있을 것이다.
버전옆의 화살표의 의미는&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;==2.0&lt;/strong&gt; - 2.0버전&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;gt;=2.0&lt;/strong&gt; - 2.0버전보다 큰 버전&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;~&amp;gt;2.0&lt;/strong&gt; - 2.0버전과 호환되는 버전&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이고&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
작성 후에는 carthage를 업데이트를 합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;carthage update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;iOS, tvOS, watchOS등 다양한 플랫폼을 지원하는 라이브러리도 있는데 플랫폼을 한정하고 싶다면 다음과 같이 할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;carthage update --platform iOS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;프레임워크 연결&lt;/h3&gt;
&lt;p&gt;이제 설치한 라이브러리 프레임워크를 Xcode에 연결해주는 작업이 필요합니다.
&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Project -&amp;gt; BuildPhase를 이동하여 왼쪽 위에 +를 눌러 새로운 Run Script를 생성합니다.&lt;/li&gt;
&lt;li&gt;그 안에서 Shell아래의 script창에 /usr/local/bin/carthage copy-frameworks를 입력합니다.&lt;/li&gt;
&lt;li&gt;다음 Input Files에 +를 하여 $(SRCROOT)/../Carthage/Build/iOS/Alamofire.framework를 추가해줍니다.
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기까지 하면 컴파일은 잘 됩니다.
하지만 소스에서 import에서 사용하기 위해 General에서 프레임워크 등록이 필요합니다.
&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General -&amp;gt; Linked Frameworks and Libraries로 가서 +로 프레임워크를 추가합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
이를 마치면 이제 Library를 사용할 수 있습니다.&lt;/p&gt;</summary></entry><entry><title>RxJava</title><link href="https://rubinposts.github.io/rxjava.html" rel="alternate"></link><published>2017-05-08T19:08:00+09:00</published><author><name>Rubin</name></author><id>tag:rubinposts.github.io,2017-05-08:rxjava.html</id><summary type="html">&lt;p&gt;요새 RxJava가 너무 핫한지라 나중에 이것을 Android에 사용하게 될 지는 모르겠지만 배워두는 것도 나쁘지 않겠다 싶어서 관심을 가져본다.
일단 ReactiveX 홈페이지에 가니 지원 목록이 ㄷㄷ하다. 그냥 모든 언어를 지원한다고 보면 될 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://reactivex.io/languages.html"&gt;ReactiveX 지원 언어 및 프레임워크&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;ReativeX란&lt;/h3&gt;
&lt;p&gt;ReactiveX는 Observable 시퀀스를 사용하여 비동기 및 이벤트 기반 프로그램들을 작성하는 라이브러리라 한다.
그리고 동기와 비동기, 싱글과 멀티에 따라 나뉜다.&lt;/p&gt;
&lt;table class="table table-striped"&gt;
 &lt;thead&gt;
 &lt;/thead&gt;&lt;tbody&gt;
  &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;single items&lt;/th&gt;&lt;th&gt;multiple items&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;synchronous&lt;/th&gt;&lt;td&gt;&lt;code&gt;T getData()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Iterable&amp;lt;T&amp;gt; getData()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;asynchronous&lt;/th&gt;&lt;td&gt;&lt;code&gt;Future&amp;lt;T&amp;gt; getData()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Observable&amp;lt;T&amp;gt; getData()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Observables는 비동기 처리에 대한 광대한 코드를 줄여주며 어떤 유스케이스에서도 사용될 수 있는 단일 추상이라 한다.&lt;/p&gt;
&lt;table class="table table-striped"&gt;
 &lt;thead&gt;
  &lt;tr&gt;&lt;th&gt;event&lt;/th&gt;&lt;th&gt;Iterable (pull)&lt;/th&gt;&lt;th&gt;Observable (push)&lt;/th&gt;&lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
  &lt;tr&gt;&lt;td&gt;retrieve data&lt;/td&gt;&lt;td&gt;&lt;code&gt;T next()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;onNext(T)&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;discover error&lt;/td&gt;&lt;td&gt;throws &lt;code&gt;Exception&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;onError(Exception)&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;complete&lt;/td&gt;&lt;td&gt;&lt;code&gt;!hasNext()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;onCompleted()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;/tbody&gt;&lt;tbody&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary></entry><entry><title>Display</title><link href="https://rubinposts.github.io/display.html" rel="alternate"></link><published>2017-05-07T13:09:00+09:00</published><author><name>Rubin</name></author><id>tag:rubinposts.github.io,2017-05-07:display.html</id><summary type="html">&lt;h3&gt;Display&lt;/h3&gt;
&lt;p&gt;display는 Block, Inline, Inline-Block, None으로 구성됩니다.&lt;/p&gt;
&lt;h4&gt;Block&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: block&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
현재 블록 안입니다.
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: block&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
현재 블록 안입니다.
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div style="display: block"&gt;
현재 블록 안입니다.
&lt;/div&gt;

&lt;div style="display: block"&gt;
현재 블록 안입니다.
&lt;/div&gt;

&lt;h4&gt;Inline&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: inline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
현재 인라인 안입니다.
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: inline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
현재 인라인 안입니다.
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div style="display: inline"&gt;
현재 인라인 안입니다.
&lt;/div&gt;

&lt;div style="display: inline"&gt;
현재 인라인 안입니다.
&lt;/div&gt;

&lt;h4&gt;Inline-Block&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: inline-block&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
현재 인라인블록 안입니다.
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: inline-block&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
현재 인라인블록 안입니다.
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div style="display: inline-block"&gt;
현재 인라인블록 안입니다.
&lt;/div&gt;

&lt;div style="display: inline-block"&gt;
현재 인라인블록 안입니다.
&lt;/div&gt;

&lt;h4&gt;None&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
현재 논 안입니다.
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
현재 논 안입니다.
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div style="display: none"&gt;
현재 논 안입니다.
&lt;/div&gt;

&lt;div style="display: none"&gt;
현재 논 안입니다.
&lt;/div&gt;</summary></entry><entry><title>펠리칸 설치하기</title><link href="https://rubinposts.github.io/pelrikan-seolcihagi.html" rel="alternate"></link><published>2016-08-28T19:00:00+09:00</published><author><name>Rubin</name></author><id>tag:rubinposts.github.io,2016-08-28:pelrikan-seolcihagi.html</id><summary type="html">&lt;h3&gt;Pelican blog generator based on python&lt;/h3&gt;
&lt;p&gt;펠리칸은 파이썬 기반으로 만들어져있다. 요새 파이썬에 관심있어진 내가 펠리칸으로 블로그를 구성한것과 무관치 않다. 따라서 펠리칸 블로그를 설치하려면 파이썬이 먼저 설치되어 있어야 한다. 참고로.. 필자는 맥북을 사용하므로 윈도우는 모른다.. ㅠㅠ&lt;/p&gt;
&lt;h3&gt;Python 설치&lt;/h3&gt;
&lt;p&gt;Yosemite이후의 Mac에는 python이 기본적으로 설치되어 있다고 합니다. 그러므로 생략..&lt;/p&gt;
&lt;h3&gt;Pip 설치&lt;/h3&gt;
&lt;p&gt;pip는 python을 사용하는 프로그램을 쉽게 설치하도록 해주는 설치기 같은 것입니다. 이것이 있어야 펠리칸 블로그 구성을 위한 몇가지 프로그램을 쉽게 설치할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python get-pip.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;자세한 설치는 &lt;a href="https://pip.pypa.io/en/stable/installing"&gt;Pip Site&lt;/a&gt;에서 보시면 됩니다.&lt;/p&gt;
&lt;h3&gt;Virtualenv 설치&lt;/h3&gt;
&lt;p&gt;가상환경 없이도 설치가 가능하지만 좀더 깔끔한 설치를 위해 필요합니다. 가상환경위에 설치된 프로그램들은 가상환경밖의 다른 프로그램들과 충돌을 일으키지 않으며 가상환경을 삭제함으로서 간단하게 제거할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이로써 Pelican Blog를 설치하기 위한 준비가 끝났습니다&lt;/p&gt;
&lt;h3&gt;Pelican 설치&lt;/h3&gt;
&lt;p&gt;이제 원하는 폴더에 가상환경을 구축하고 펠리칸을 설치해봅니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv ~/python/pelicanenv
&lt;span class="nb"&gt;source&lt;/span&gt; ~/python/pelicanenv/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;첫 명령은 pelicanenv폴더에 가상환경 파일들을 설치하라는 의미이고 
두번째 명령은 설치된 가상환경을 활성화 시켜라 라는 의미입니다.
두번째 명령까지 제대로 동작하였다면 아마 프롬프르 부분 앞에 (pelicanenv)라는 것이 붙어서 나올것입니다.
이는 현재 가상환경 위에 있다는 의미이고 이 상태에서 pip로 설치되는 프로그램들은 다 가상환경 안에서만 작동하게 될 것입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;물론 어디서든 이 명령어를 치면 간단하게 현재의 가상환경을 비활성화 시킬 수 있습니다.&lt;/p&gt;
&lt;p&gt;가상환경을 구축하였으면 자신이 펠리칸 블로그를 구축하기 원하는 폴더로 이동한 다음&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;명령으로 펠리칸과 마크다운을 설치하여 줍니다. &lt;/p&gt;
&lt;p&gt;그 후 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;명령으로 일단 펠리칸 생성기 설치는 끝났습니다. &lt;/p&gt;</summary><category term="pelican"></category><category term="installation"></category></entry><entry><title>What is Philosophy?</title><link href="https://rubinposts.github.io/what-is-philosophy.html" rel="alternate"></link><published>2016-08-28T18:40:00+09:00</published><author><name>Rubin</name></author><id>tag:rubinposts.github.io,2016-08-28:what-is-philosophy.html</id><summary type="html">&lt;h3&gt;철학이란 무엇일까?&lt;/h3&gt;
&lt;p&gt;사람이 인생을 살아가는 힘이라고 생각한다. 사람은 인생을 살아감에 있어 무한한 선택을 강요받으며 선택에 의해 행복할수도 있고 상처받을 수도 있고 비참해질수도 있다. 하지만 사람이 행복하고 상처받는 것은 지극히 개인적이다. 똑같은 상황에서도 어떤 사람은 행복할 수 있고 어떤 사람은 행복하지 않을 수 있으며 위기의 순간에서 어떤 사람은 지혜를 발휘하여 빠져나오는 반면 위기에 비난하지만 결국 순응하며 살아가는 사람도 있다. 아무리 많이 배운 사람이라도 잘못된 방향의 생각으로 한순간에 무너질 수 있으며 못배운 사람이라도 방향을 잘잡아 순간적인 노력으로 개과천선하는 사람도 있다.
  철학은 사람이 인생을 살아감에 있어서 더 행복하고 더 지혜롭게 살아가기 위해 그 사람 스스로가 갈고 닦아야 하는 학문이라고 생각한다. 철학은 그 사람의 살아가는 장소와 주변 환경, 주변 사람에 따라 달라져야 하는 유연한 학문이기 때문이다. 사람은 언제나 무한한 공격에 노출되어 있으며 그 공격을 방어하고 개선하는 방식은 달라야 하기 때문이기도 하며 시대상, 국가, 지역사회의 분위기에 따라서도 달라져야 하기 때문이다. 따라서 공자나 맹자, 소크라테스의 철학은 도움이 되는 부분도 있고 도움이 되지 않는 부분이 있을수도 있다. 다른 사람의 철학을 배우는 것도 중요하지만 필요한 부분만 가져와 자신의 철학과 녹여내는것이 더 중요한 부분이다.&lt;/p&gt;</summary></entry><entry><title>HackerEarth의 WalmartLabs에 도전</title><link href="https://rubinposts.github.io/hackerearthyi-walmartlabse-dojeon.html" rel="alternate"></link><published>2016-08-20T10:22:00+09:00</published><author><name>Rubin</name></author><id>tag:rubinposts.github.io,2016-08-20:hackerearthyi-walmartlabse-dojeon.html</id><summary type="html">&lt;h3&gt;HackerEarth&lt;/h3&gt;
&lt;p&gt;웹서핑을 하던 도중 들어가게 되었다&lt;/p&gt;
&lt;h3&gt;WalmartLabs&lt;/h3&gt;
&lt;p&gt;마침 HackerEarth의 도전 목록에 WalmartLabs것이 있어서 도전하게 되었다. 이 도전이 잘 될것이란 생각은 없었고 그저 문제 하나 풀어보자라는 마음으로 시작하게 되었다&lt;/p&gt;
&lt;h3&gt;Cafe&lt;/h3&gt;
&lt;p&gt;무더워 죽겠는 여름에 시원한 카페에서 커피한잔 마시면서 컴퓨터를 하고 있었으므로 이곳에서 도전하게 되었는데 문제는 인터넷.. ㅠㅠ 카페의 와이파이를 잡아서 문제를 풀고 있는데 잦은 Disconnection 및 Reconnection이 발생하여 에러를 유발하였는데 특히 Code Autosaving Error.. Compile에러등 종류도 다양하게 나서 계속 시간을 잡아먹고 브라우저를 껐다 켜기도 하였다..&lt;/p&gt;
&lt;h3&gt;Challenge&lt;/h3&gt;
&lt;p&gt;문제는 Queue 및 BinarySearch환경에서 Optimal Time과 그 Path를 알아내는 문제였는데 코딩은 많이 해보았다고 생각하는데 BinarySearch에 대해 진지하게 고민한 적이 없어서 3시간 주어진 도전장소에서 진지한 고민을 하였다.. 허허.. 문제는 BinaryTree를 구성하는 것이 아니라 주어진 BinaryTree의 각각의 Branch에 대기열헤 해당하는 Queue가 존재하고 Root에서 단 한명만 빠져나갈수 있으며 각 Junction(Branch가 만나는 지점)에 누군가가 있어 한번은 Left, 한번은 Right에서 큐를 상위 Branch로 올려보낸다는 그런 내용이었다. Root단에서 한명이 빠져나가려면 Root Junction을 이루고 있는 두개의 Branch중에 한곳에서 사람이 빠져나가야하고 빠져나간 Branch에 연결된 다른쪽 Junction이 있다면 빠져나가진 Branch에 올려보낼 다음 사람을 역시 그 Junction의 2개나 혹은 1개의 브랜치에서 올려보내고... 문제는 BinaryTree는 이미 구성되어 있으므로 어느 대기열에 들어가야 최적의 타임이 나오며 그 경로가 어딘지를 어떻게 알아내느냐이다. &lt;/p&gt;</summary></entry><entry><title>Octopress테마 설치하기</title><link href="https://rubinposts.github.io/octopresstema-seolcihagi.html" rel="alternate"></link><published>2016-08-15T12:30:00+09:00</published><author><name>Rubin</name></author><id>tag:rubinposts.github.io,2016-08-15:octopresstema-seolcihagi.html</id><summary type="html">&lt;p&gt;막상 펠리칸으로 블로그를 설치하고 봤는데 펠리칸으로 블로그를 구축한 점은 매우 감격스러웠으나 이 테마는 사용을 못할거 같았다.. 테마를 변경할 방법이 있나 알아본결과 펠리칸이 상당히 많은 수의 테마를 보유하고 있음을 알수 있었다!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican Theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여러가지 눈팅을 해본결과 Octopress가 제일 마음에 들었고 설치하기로 마음먹었다.
먼저 Octopress테마를 다운 받아서 아래의 폴더에 넣어준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;../pelicanenv/lib/python2.7/site-packages/pelican/themes/octopress/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;다음에 아래의 문장을 pelicanconf.py에 넣어준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/rubin/python/blog/pelicanenv/lib/python2.7/site-packages/pelican/themes/octopress&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이게 다였나.. 기억이 가물가물.. 참 쉽죠..?&lt;/p&gt;</summary></entry><entry><title>Noto Sans KR로 폰트 바꾸기</title><link href="https://rubinposts.github.io/noto-sans-krro-ponteu-baggugi.html" rel="alternate"></link><published>2016-08-15T12:15:00+09:00</published><author><name>Rubin</name></author><id>tag:rubinposts.github.io,2016-08-15:noto-sans-krro-ponteu-baggugi.html</id><summary type="html">&lt;p&gt;펠리칸으로 첫 블로그를 하다라는 글을 썼는데 한글을 처음 써보니 명조체 비스무리한 글자들이 나타났다.. 가독성도 떨어지고 친숙하지도 않아 폰트를 바꿔야겠다 맘먹었지만 그 게시물 하나만 바꾼다고 될 일은 아니므로 테마에 있는 글씨는 수정할 필요가 있었다.&lt;/p&gt;
&lt;h3&gt;Octopress&lt;/h3&gt;
&lt;p&gt;현재 이 블로그는 펠리칸의 Octopress테마를 사용한다. 폰트를 바꾸는건 어떤 테마나 다 비슷할테니 테마를 언급하는것은 의미없을지도 모르지만.. 일단은 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;../pelicanenv/lib/python2.7/site-packages/pelican/themes/octopress/templates/base.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;에 가서 폰트관련 css를 추가해준다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//fonts.googleapis.com/earlyaccess/notosanskr.css&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Noto폰트의 css를 위처럼 추가해주었다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; ../pelicanenv/lib/python2.7/site-packages/pelican/themes/octopress/static/css/main.css
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;다음은 위의 파일로 들어가서 모든 'PT Serif'라는 글자를 'Noto Sans KR'로 변경해주면 된다. 참 쉽죠?..&lt;/p&gt;</summary></entry><entry><title>첫 펠리칸 블로그</title><link href="https://rubinposts.github.io/ceos-pelrikan-beulrogeu.html" rel="alternate"></link><published>2016-08-14T11:30:00+09:00</published><author><name>Rubin</name></author><id>tag:rubinposts.github.io,2016-08-14:ceos-pelrikan-beulrogeu.html</id><summary type="html">&lt;h3&gt;Github&lt;/h3&gt;
&lt;p&gt;짓헙에서 여러번 블로그를 만들 시도를 했었다. 직접 만들었지만 디자인도 맘에 안들고 너무 손이 들어갔다. 지킬로 바꾸려 했지만 나와 친숙하지 않은 루비는 자꾸 에러를 뱉어냈다. 최근 회사의 프로젝트가 파이썬으로 가닥이 잡힐때에 파이썬 공부를 해보자 싶어서 조사해봤던 펠리칸으로 이렇게 블로그를 개설할지는 미처 몰랐지만 지금 보니 썩 마음에 든다.&lt;/p&gt;
&lt;h3&gt;Pelican&lt;/h3&gt;
&lt;p&gt;펠리칸은 파이썬을 기반으로 만들어진 Blog-Generator이다. 이거 하려는 덕분에 파이썬 가상환경 및 몇가지에 좀 친숙해졌다. 여러번의 시행착오가 있었고 조금 좌절도 했지만 이렇게 블로그를 개장하게 되었다.(눙물) 게다가 나중에 안 사실이지만 디자인도 변경할 수 있었다! 디자인도 바꾸고 나니 너무 마음에 든다. 글을 진득하게 쓰는 성격도 아니고 블로그를 진득하게 운영해본 경험도 없어서 걱정이지만 나의 생각과 느낌, 그리고 프로그래밍 적으로 정리할 것들을 적어보고자 한다.&lt;/p&gt;</summary></entry><entry><title>Comparison of Sorting Algorithm</title><link href="https://rubinposts.github.io/comparison-of-sorting-algorithm.html" rel="alternate"></link><published>2015-08-15T09:41:00+09:00</published><author><name>Rubin</name></author><id>tag:rubinposts.github.io,2015-08-15:comparison-of-sorting-algorithm.html</id><summary type="html">&lt;h3&gt;Awesome!&lt;/h3&gt;
&lt;p&gt;&lt;iframe  title="Sort" width="480" height="390" src="https://www.youtube.com/embed/ZZuD6iUe3Pc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</summary></entry></feed>